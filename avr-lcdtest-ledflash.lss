
avr-lcdtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000002fc  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015e5  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002f55  2**0
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00002f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  0000355a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00003b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  88:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z10initSystemv>:

void initSystem()
{
    // Clear out any left over settings from the bootloader

    ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
  90:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  92:	f8 94       	cli
    {
        // The bootloader connects pins 0 and 1 to the USART; disconnect them
        // so they are restored as normal digital i/o.
        // Reconnect them explicitly if serial i/o is desired
        UCSR0B = 0;
  94:	10 92 c1 00 	sts	0x00C1, r1

        // Clear Timer0
        TCCR0A = 0;     // Clear all settings
  98:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;     // Clear all settings
  9a:	15 bc       	out	0x25, r1	; 37
        TIMSK0 = 0;     // Disable all interrupts
  9c:	10 92 6e 00 	sts	0x006E, r1

        // Clear Timer1
        TCCR1A = 0;     // Clear all settings
  a0:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;     // Clear all settings
  a4:	10 92 81 00 	sts	0x0081, r1
        TIMSK1 = 0;     // Disable all interrupts
  a8:	10 92 6f 00 	sts	0x006F, r1

        // Clear Timer2
        TCCR2A = 0;     // Clear all settings
  ac:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;     // Clear all settings
  b0:	10 92 b1 00 	sts	0x00B1, r1
        TIMSK2 = 0;     // Disable all interrupts
  b4:	10 92 70 00 	sts	0x0070, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  b8:	8f bf       	out	0x3f, r24	; 63

#endif
    }

    // Enable interrupts
    sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <__vector_16>:




ISR( TIMER0_OVF_vect )
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
    // Copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = timer0_millis;
  d4:	80 91 01 01 	lds	r24, 0x0101
  d8:	90 91 02 01 	lds	r25, 0x0102
  dc:	a0 91 03 01 	lds	r26, 0x0103
  e0:	b0 91 04 01 	lds	r27, 0x0104
    uint8_t f = timer0_fract;
  e4:	30 91 00 01 	lds	r19, 0x0100

    m += kMillisInc;
    f += kFractInc;
  e8:	23 e0       	ldi	r18, 0x03	; 3
  ea:	23 0f       	add	r18, r19
    if ( f >= kFractMax )
  ec:	2d 37       	cpi	r18, 0x7D	; 125
  ee:	20 f4       	brcc	.+8      	; 0xf8 <__vector_16+0x3a>
    // Copy these to local variables so they can be stored in registers
    // (volatile variables must be read from memory on every access)
    unsigned long m = timer0_millis;
    uint8_t f = timer0_fract;

    m += kMillisInc;
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	a1 1d       	adc	r26, r1
  f4:	b1 1d       	adc	r27, r1
  f6:	05 c0       	rjmp	.+10     	; 0x102 <__vector_16+0x44>
    f += kFractInc;
    if ( f >= kFractMax )
    {
        f -= kFractMax;
  f8:	26 e8       	ldi	r18, 0x86	; 134
  fa:	23 0f       	add	r18, r19
        ++m;
  fc:	02 96       	adiw	r24, 0x02	; 2
  fe:	a1 1d       	adc	r26, r1
 100:	b1 1d       	adc	r27, r1
    }

    timer0_fract = f;
 102:	20 93 00 01 	sts	0x0100, r18
    timer0_millis = m;
 106:	80 93 01 01 	sts	0x0101, r24
 10a:	90 93 02 01 	sts	0x0102, r25
 10e:	a0 93 03 01 	sts	0x0103, r26
 112:	b0 93 04 01 	sts	0x0104, r27
    timer0_overflow_count++;
 116:	80 91 05 01 	lds	r24, 0x0105
 11a:	90 91 06 01 	lds	r25, 0x0106
 11e:	a0 91 07 01 	lds	r26, 0x0107
 122:	b0 91 08 01 	lds	r27, 0x0108
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	a1 1d       	adc	r26, r1
 12a:	b1 1d       	adc	r27, r1
 12c:	80 93 05 01 	sts	0x0105, r24
 130:	90 93 06 01 	sts	0x0106, r25
 134:	a0 93 07 01 	sts	0x0107, r26
 138:	b0 93 08 01 	sts	0x0108, r27
}
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_Z6millisv>:
{
    // Disable interrupts while we read timer0_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer0_millis)
    unsigned long m;

    ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
 152:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 154:	f8 94       	cli
    {
        m = timer0_millis;
 156:	60 91 01 01 	lds	r22, 0x0101
 15a:	70 91 02 01 	lds	r23, 0x0102
 15e:	80 91 03 01 	lds	r24, 0x0103
 162:	90 91 04 01 	lds	r25, 0x0104
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 166:	2f bf       	out	0x3f, r18	; 63
    }

    return m;
}
 168:	08 95       	ret

0000016a <_Z6microsv>:
{
    // Disable interrupts to avoid reading inconsistent values
    unsigned long m;
    uint8_t t;

    ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
 16a:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 16c:	f8 94       	cli
    {
        m = timer0_overflow_count;
 16e:	80 91 05 01 	lds	r24, 0x0105
 172:	90 91 06 01 	lds	r25, 0x0106
 176:	a0 91 07 01 	lds	r26, 0x0107
 17a:	b0 91 08 01 	lds	r27, 0x0108
        t = TCNT0;
 17e:	26 b5       	in	r18, 0x26	; 38

        if ( ( TIFR0 & _BV(TOV0) ) && ( t < 255 ) )
 180:	a8 9b       	sbis	0x15, 0	; 21
 182:	02 c0       	rjmp	.+4      	; 0x188 <_Z6microsv+0x1e>
 184:	2f 3f       	cpi	r18, 0xFF	; 255
 186:	99 f4       	brne	.+38     	; 0x1ae <_Z6microsv+0x44>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 188:	3f bf       	out	0x3f, r19	; 63
        {
            m++;
        }
    }

    return ( (m << 8) + t ) * ( 64 / clockCyclesPerMicrosecond() );
 18a:	ba 2f       	mov	r27, r26
 18c:	a9 2f       	mov	r26, r25
 18e:	98 2f       	mov	r25, r24
 190:	88 27       	eor	r24, r24
 192:	82 0f       	add	r24, r18
 194:	91 1d       	adc	r25, r1
 196:	a1 1d       	adc	r26, r1
 198:	b1 1d       	adc	r27, r1
 19a:	bc 01       	movw	r22, r24
 19c:	cd 01       	movw	r24, r26
 19e:	42 e0       	ldi	r20, 0x02	; 2
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	88 1f       	adc	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	4a 95       	dec	r20
 1aa:	d1 f7       	brne	.-12     	; 0x1a0 <_Z6microsv+0x36>
 1ac:	08 95       	ret
        m = timer0_overflow_count;
        t = TCNT0;

        if ( ( TIFR0 & _BV(TOV0) ) && ( t < 255 ) )
        {
            m++;
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	a1 1d       	adc	r26, r1
 1b2:	b1 1d       	adc	r27, r1
 1b4:	e9 cf       	rjmp	.-46     	; 0x188 <_Z6microsv+0x1e>

000001b6 <_Z17delayMillisecondsm>:




void delayMilliseconds( unsigned long ms )
{
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	6b 01       	movw	r12, r22
 1c4:	7c 01       	movw	r14, r24
    uint16_t start = static_cast<uint16_t>( micros() );
 1c6:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z6microsv>
 1ca:	eb 01       	movw	r28, r22

    while ( ms > 0 )
 1cc:	c1 14       	cp	r12, r1
 1ce:	d1 04       	cpc	r13, r1
 1d0:	e1 04       	cpc	r14, r1
 1d2:	f1 04       	cpc	r15, r1
 1d4:	79 f0       	breq	.+30     	; 0x1f4 <_Z17delayMillisecondsm+0x3e>
    {
        if ( ( static_cast<uint16_t>( micros() ) - start ) >= 1000 )
 1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z6microsv>
 1da:	6c 1b       	sub	r22, r28
 1dc:	7d 0b       	sbc	r23, r29
 1de:	68 3e       	cpi	r22, 0xE8	; 232
 1e0:	73 40       	sbci	r23, 0x03	; 3
 1e2:	a0 f3       	brcs	.-24     	; 0x1cc <_Z17delayMillisecondsm+0x16>
        {
            ms--;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	c8 1a       	sub	r12, r24
 1e8:	d1 08       	sbc	r13, r1
 1ea:	e1 08       	sbc	r14, r1
 1ec:	f1 08       	sbc	r15, r1
            start += 1000;
 1ee:	c8 51       	subi	r28, 0x18	; 24
 1f0:	dc 4f       	sbci	r29, 0xFC	; 252
 1f2:	ec cf       	rjmp	.-40     	; 0x1cc <_Z17delayMillisecondsm+0x16>
        }
    }
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	cf 90       	pop	r12
 200:	08 95       	ret

00000202 <_Z17delayMicrosecondsj>:

    // for the 16 MHz clock on most Arduino boards

    // for a one-microsecond delay, simply return.  the overhead
    // of the function call yields a delay of approximately 1 1/8 us.
    if ( --us == 0 )
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	39 f0       	breq	.+14     	; 0x214 <_Z17delayMicrosecondsj+0x12>
    }

    // the following loop takes a quarter of a microsecond (4 cycles)
    // per iteration, so execute it four times for each microsecond of
    // delay requested.
    us <<= 2;
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25

    // account for the time taken in the preceeding commands.
    us -= 2;
 20e:	02 97       	sbiw	r24, 0x02	; 2
    // busy wait
    __asm__ __volatile__
    (
        "1: sbiw %0,1" "\n\t" // 2 cycles
        "brne 1b" : "=w" (us) : "0" (us) // 2 cycles
    );
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <_Z17delayMicrosecondsj+0xe>
 214:	08 95       	ret

00000216 <_Z15initSystemClockv>:
 216:	9f b7       	in	r25, 0x3f	; 63
 218:	f8 94       	cli
 21a:	14 bc       	out	0x24, r1	; 36
 21c:	15 bc       	out	0x25, r1	; 37
 21e:	ee e6       	ldi	r30, 0x6E	; 110
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
 224:	16 bc       	out	0x26, r1	; 38
 226:	84 b5       	in	r24, 0x24	; 36
 228:	83 60       	ori	r24, 0x03	; 3
 22a:	84 bd       	out	0x24, r24	; 36
 22c:	85 b5       	in	r24, 0x25	; 37
 22e:	83 60       	ori	r24, 0x03	; 3
 230:	85 bd       	out	0x25, r24	; 37
 232:	80 81       	ld	r24, Z
 234:	81 60       	ori	r24, 0x01	; 1
 236:	80 83       	st	Z, r24
 238:	9f bf       	out	0x3f, r25	; 63
 23a:	08 95       	ret

0000023c <main>:

int main() {

    int c;

    initSystem();
 23c:	0e 94 48 00 	call	0x90	; 0x90 <_Z10initSystemv>
    initSystemClock();
 240:	0e 94 0b 01 	call	0x216	; 0x216 <_Z15initSystemClockv>

    setGpioPinModeOutput(pPin13);
 244:	25 9a       	sbi	0x04, 5	; 4
    for (;;) {
       for(c = 0; c < 2; c++) {
          writeGpioPinDigital(pPin13, c);
 246:	2d 98       	cbi	0x05, 5	; 5
 * \arg \c m the number of milliseconds to delay.
 *
 */

inline void delay( unsigned long ms )
{ delayMilliseconds( ms ); }
 248:	64 ef       	ldi	r22, 0xF4	; 244
 24a:	71 e0       	ldi	r23, 0x01	; 1
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z17delayMillisecondsm>
 254:	2d 9a       	sbi	0x05, 5	; 5
 256:	64 ef       	ldi	r22, 0xF4	; 244
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z17delayMillisecondsm>
 262:	f1 cf       	rjmp	.-30     	; 0x246 <main+0xa>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
